@page "/roguelike/newgame"
@using MaINTestEnv.Models

@inject AdventureSettingSevice SettingSevice
@inject GameTypeService TypeService

@rendermode InteractiveServer

<h3 class="mb-4 text-center">Adventure Setup</h3>

@*:TODO create form for choosing adventure settings *@

@if (adventureSettings == null)
{
	<p><em>Loading...</em></p>
}
else
{
	<EditForm Model="@gameSettings" OnValidSubmit="HandleSettingsSubmit">
		<DataAnnotationsValidator />

		<div class="container">
			@* <h5 class="mb-4 text-center"></h5> *@
			<div class="row justify-content-center text-center">
				<div class="col-3">
					<div class="mb-3">
						<label for="playerName" class="form-label">Player Name:</label>
						<InputText id="playerName" class="form-control" @bind-Value="gameSettings.PlayerName" placeholder="Albert Einstein" />
						<ValidationMessage For="@(() => gameSettings.PlayerName)" />
					</div>
				</div>

				<div class="col-3">
					<div class="mb-3">
						<label for="length" class="form-label">Adventure Length:</label>
						<InputNumber id="length" class="form-control" @bind-Value="gameSettings.AdventureLength" />
						<ValidationMessage For="@(() => gameSettings.AdventureLength)" />
					</div>
				</div>
			</div>
			<h5 class="mt-3 mb-3 text-center">@typeTitle</h5>

			@*: TYPE CHOICE BUTTONS *@
			<div class="row gap-2 justify-content-center mt-3 @(typeChosen ? "d-none" : "")">
				<div class="col-2">
					<div class="row mb-3">
						<button type="button" @onclick="() => DisplayTypeSettings(custom: false)" class="btn btn-success">Predefined Settings</button>
					</div>
				</div>
				<div class="col-2">
					<div class="row mb-3">
						<button type="button" @onclick="() => DisplayTypeSettings(custom: true)" class="btn btn-warning">Custom Adventure</button>
					</div>
				</div>
			</div>

			<div class="@(typeChosen ? "" : "d-none")">

				@*: PREDEFINED OPTIONS *@
				<div class="row justify-content-center text-center @(isCustom ? "d-none" : "")">
					<div class="col-4">
						<div class="mb-3">
							<label for="setting" class="form-label">Adventure Setting:</label>
							<InputSelect id="setting" class="form-select" @bind-Value="gameSettings.AdventureSetting">
								<option value="">Select Adventure Setting</option>
								@foreach (AdventureSetting setting in adventureSettings)
								{
									<option value="@setting.Name">@setting.Name</option>
								}
							</InputSelect>
							<ValidationMessage For="@(() => gameSettings.AdventureSetting)" />
						</div>
					</div>

					<div class="col-4">
						<div class="mb-3">
							<label for="type" class="form-label">Game Type:</label>
							<InputSelect id="setting" class="form-select" @bind-Value="gameSettings.GameType">
								<option value="">Select Game Type</option>
								@foreach (GameType type in gameTypes)
								{
									<option value="@type.Name">@type.Name</option>
								}
							</InputSelect>
							<ValidationMessage For="@(() => gameSettings.GameType)" />
						</div>
					</div>

					<div class="row justify-content-center ">
						<div class="col-2">
							<div class="row mb-3">
								<button type="button" @onclick="() => DisplayTypeSettings(custom: true)" class="btn btn-light">Switch Type</button>
							</div>
						</div>
					</div>
				</div>

				@*: CUSTOM OPTIONS *@
				<div class="row justify-content-center text-center @(isCustom ? "" : "d-none")">
					<div class="col-8">
						<input type="text" class="form-control" @bind="gameSettings.CustomPrompt" placeholder="Write your own custom adventure" />
					</div>

					<div class="row justify-content-center mt-3">
						<div class="col-2">
							<div class="row mb-3">
								<button type="button" @onclick="() => DisplayTypeSettings(custom: false)" class="btn btn-light">Switch Type</button>
							</div>
						</div>
					</div>
				</div>


			</div>

			<div class="row justify-content-center mt-3">
				<div class="col-2">
					<div class="row mb-3">
						<button type="submit" class="btn btn-primary">Start Adventure</button>
					</div>
				</div>
			</div>

			<ExitToMenuButton Name="Return to Menu" />
		</div>

	</EditForm>
}

@code {
	private AdventureSetting[]? adventureSettings;
	private GameType[]? gameTypes;
	private string typeTitle = "Adventure Type";
	private bool typeChosen = false;
	private bool isCustom = false;

	[SupplyParameterFromForm]
	public GameSettings gameSettings { get; set; } = new()
	{
		PlayerName = String.Empty,
		AdventureSetting = String.Empty,
		GameType = String.Empty,
	};

	protected override void OnInitialized()
	{
		adventureSettings = SettingSevice.GetAdventureSettings();
		gameTypes = TypeService.GetGameTypes();
	}

	private void DisplayTypeSettings(bool custom)
	{
		isCustom = custom;
		typeChosen = true;
		typeTitle = isCustom ? "Custom Adventure" : "Choose Settings";
	}

	private async Task HandleSettingsSubmit()
	{
		@*:TODO Generate the adventure prompt *@
		@*:TODO Display modal and ask for confirmation: okey button, re-genarate button, edit adventure button *@
	}

	private async Task HandleConfirmation()
	{
		@*:? On okey button clicked: Populate the instance of gameSettings with form values *@
	}

	private async Task HandleRegenerate()
	{
		@*:? On Re-generate button clicked: Send prompt again (maybe with context, so it doesn't give a simmilar answer) *@
	}

	private async Task HandleEdit()
	{
		@*:? On Edit button clicked: Go back to form *@
	}
}