@page "/roguelike/newgame"
@using MaINTestEnv.Models

@inject IJSRuntime JS
@inject AdventureSettingSevice SettingSevice
@inject GameTypeService TypeService

@rendermode InteractiveServer

<h3 class="mb-4 text-center">Adventure Setup</h3>

<EditForm EditContext="@editContext" OnValidSubmit="HandleConfirmation">
	<DataAnnotationsValidator />

	<div class="container mb-3">
		@* <h5 class="mb-4 text-center"></h5> *@
		<div class="row justify-content-center text-center">
			<div class="col-3">
				<div class="mb-3">
					<label for="playerName" class="form-label">Player Name:</label>
					<InputText id="playerName" class="form-control" @bind-Value="gameSettings.PlayerName" placeholder="Albert" />
					<ValidationMessage For="@(() => gameSettings.PlayerName)" />
				</div>
			</div>

			<div class="col-3">
				<div class="mb-3">
					<label for="length" class="form-label">Adventure Length:</label>
					<InputNumber id="length" class="form-control" @bind-Value="gameSettings.AdventureLength" />
					<ValidationMessage For="@(() => gameSettings.AdventureLength)" />
				</div>
			</div>
		</div>
		<h5 class="mt-3 mb-3 text-center">@typeTitle</h5>

		@*: TYPE CHOICE BUTTONS *@
		<div class="row gap-2 justify-content-center mt-3 @(typeChosen ? "d-none" : "")">
			<div class="col-2">
				<div class="row mb-3">
					<button type="button" @onclick="() => DisplayTypeSettings(custom: false)" class="btn btn-success">Predefined Settings</button>
				</div>
			</div>
			<div class="col-2">
				<div class="row mb-3">
					<button type="button" @onclick="() => DisplayTypeSettings(custom: true)" class="btn btn-warning">Custom Adventure</button>
				</div>
			</div>
		</div>

		<div class="@(typeChosen ? "" : "d-none")">

			@*:3 PREDEFINED OPTIONS *@
			<div class="row justify-content-center text-center @(isCustom ? "d-none" : "")">

				@if (adventureSettings == null || gameTypes == null)
				{
					<p><em>Loading...</em></p>
				}
				else
				{
					<div class="col-3">
						<div class="mb-3">
							<label for="setting" class="form-label">Adventure Setting:</label>
							<InputSelect id="setting" class="form-control" @bind-Value="gameSettings.AdventureSetting">
								<option value="">Select Adventure Setting</option>
								@foreach (AdventureSetting setting in adventureSettings)
								{
									<option value="@setting.Name">@setting.Name</option>
								}
							</InputSelect>
							<ValidationMessage For="@(() => gameSettings.AdventureSetting)" />
						</div>
					</div>

					<div class="col-3">
						<div class="mb-3">
							<label for="type" class="form-label">Game Type:</label>
							<InputSelect id="type" class="form-control" @bind-Value="gameSettings.GameType">
								<option value="">Select Game Type</option>
								@foreach (GameType type in gameTypes)
								{
									<option value="@type.Name">@type.Name</option>
								}
							</InputSelect>
							<ValidationMessage For="@(() => gameSettings.GameType)" />
						</div>
					</div>
				}

				<div class="row justify-content-center ">
					<div class="col-2">
						<div class="row mb-3">
							<button type="button" @onclick="() => DisplayTypeSettings(custom: true)" class="btn btn-light">Switch Type</button>
						</div>
					</div>
				</div>
			</div>

			@*:& CUSTOM OPTIONS *@
			<div class="row justify-content-center text-center @(isCustom ? "" : "d-none")">
				<div class="col-6 mb-3">
					<label for="customPrompt" class="form-label">Prompt:</label>
					<InputTextArea id="customPrompt" class="form-control" Rows="4" @bind-Value="gameSettings.CustomPrompt"
						placeholder="Write your own custom adventure" />
				</div>

				<div class="row justify-content-center">
					<div class="col-2">
						<div class="row mb-3">
							<button type="button" @onclick="() => DisplayTypeSettings(custom: false)" class="btn btn-light">Switch Type</button>
						</div>
					</div>
				</div>
			</div>
		</div>

		@*: GENERATE BUTTON *@
		<div class="row justify-content-center mt-3 @(typeChosen ? "" : "d-none")">
			<div class="col-2">
				<div class="row">
					<button type="button" @onclick="HandleGenerate" class="btn btn-primary">Generate
						Adventure</button>
				</div>
			</div>
		</div>

		@*: MODAL *@
		<div class="modal fade" id="generateModal" tabindex="-1" aria-labelledby="generateModalLabel" aria-hidden="true">
			<div class="modal-dialog modal-dialog-scrollable">
				<div class="modal-content">
					<div class="modal-header">
						<h1 class="modal-title fs-5" id="generateModalLabel">Generated Adventure</h1>
						<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
					</div>
					<div class="modal-body">
						@*:TODO if (isLoading) { DisplayLoadingSpinner } else { DisplayContent } *@
					</div>
					<div class="modal-footer">
						<button type="submit" class="btn btn-success">OK, Start Adventure!</button>
						<button type="button" class="btn btn-warning" @onclick="HandleGenerate">Re-generate</button>
						<button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Back to Form</button>
					</div>
				</div>
			</div>
		</div>

	</div>

	<ExitToMenuButton Name="Return to Menu" />

</EditForm>


@code {
	private AdventureSetting[]? adventureSettings;
	private GameType[]? gameTypes;
	private string typeTitle = "Adventure Type";
	private bool typeChosen = false;
	private bool isCustom = false;
	private string generatedAdventure = "";
	private EditContext editContext;
	private ValidationMessageStore messageStore;

	[SupplyParameterFromForm]
	public GameSettings gameSettings { get; set; } = new()
	{
		PlayerName = String.Empty,
	};

	protected override void OnInitialized()
	{
		adventureSettings = SettingSevice.GetAdventureSettings();
		gameTypes = TypeService.GetGameTypes();
		editContext = new EditContext(gameSettings);
		messageStore = new ValidationMessageStore(editContext);
	}

	private void DisplayTypeSettings(bool custom)
	{
		isCustom = custom;
		typeChosen = true;
		typeTitle = isCustom ? "Custom Adventure" : "Choose Settings";
	}

	// On Generate or Regenerate button clicked
	private async Task HandleGenerate()
	{
		messageStore.Clear();

		CheckFormValidation();

		if (!editContext.Validate()) return;

		@*:TODO Display modal only if there are no missing fields using JSInterop instead of attributes *@

		// Open modal only when validation passes
		await JS.InvokeVoidAsync("bootstrapInterop.showModal", "#generateModal");

		@*:TODO Generate the adventure prompt and display it in the modal *@
	}

	// On OK button clicked
	private void HandleConfirmation()
	{
		@*:TODO Populate the instance of gameSettings with form values *@

		@*:TODO Create a Save instance add to it GameSettings and generatedAdventure then send it to SaveService  *@

		@*:? In SaveService create add the newly created Save object to the list of Saves (to database in the future) *@
	}

	private void CheckFormValidation()
	{
		if (isCustom && string.IsNullOrWhiteSpace(gameSettings.CustomPrompt))
		{
			messageStore.Add(new FieldIdentifier(gameSettings, nameof(gameSettings.CustomPrompt)), "Please provide prompt in order to generate the adventure");
		}

		if (!isCustom)
		{
			if (string.IsNullOrWhiteSpace(gameSettings.AdventureSetting))
			{
				messageStore.Add(new FieldIdentifier(gameSettings, nameof(gameSettings.AdventureSetting)), "Please provide the adventure setting");
			}

			if (string.IsNullOrWhiteSpace(gameSettings.GameType))
			{
				messageStore.Add(new FieldIdentifier(gameSettings, nameof(gameSettings.GameType)), "Please provide the adventure type");
			}
		}

		editContext.NotifyValidationStateChanged();
	}
}